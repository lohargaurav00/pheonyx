// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'udp_client.dart';

/// Starts an mDNS server for device discovery on the local network.
///
/// # Arguments
///
/// * `dur` - Optional duration (in seconds) to run the server before shutting down.
/// If `None`, the server runs for 5 seconds.
///
/// # Returns
///
/// * `Result<()>` - Returns `Ok(())` if the server starts successfully, otherwise an error.
Future<void> startMdnsServer({int? dur}) =>
    RustLib.instance.api.crateApiBridgeStartMdnsServer(dur: dur);

/// Creates a new instance of `UdpClient`.
///
/// # Returns
///
/// * `UdpClient` - A new UDP client with default unconnected state.
UdpClient createUdpClient() =>
    RustLib.instance.api.crateApiBridgeCreateUdpClient();

/// Connects a `UdpClient` instance to a specified UDP server.
///
/// # Arguments
///
/// * `client` - Mutable reference to the `UdpClient`.
/// * `ip` - The IP address of the server to connect to.
/// * `port` - The port number of the server.
///
/// # Returns
///
/// * `Result<()>` - Returns `Ok(())` if the connection is successful, otherwise an error.
Future<void> udpClientConnectToServer({
  required UdpClient client,
  required String ip,
  required int port,
}) => RustLib.instance.api.crateApiBridgeUdpClientConnectToServer(
  client: client,
  ip: ip,
  port: port,
);

/// Sends a text message to the connected UDP server using the given client.
///
/// # Arguments
///
/// * `client` - Reference to the `UdpClient`.
/// * `message` - The message string to be sent.
///
/// # Returns
///
/// * `Result<()>` - Returns `Ok(())` if the message is sent successfully, otherwise an error.
Future<void> udpClientSendText({
  required UdpClient client,
  required String message,
}) => RustLib.instance.api.crateApiBridgeUdpClientSendText(
  client: client,
  message: message,
);

/// Receives a text message from the connected UDP server using the given client.
///
/// # Arguments
///
/// * `client` - Reference to the `UdpClient`.
///
/// # Returns
///
/// * `Result<String>` - Returns the received message as a string if successful, otherwise an error.
Future<String> udpClientReceiveText({required UdpClient client}) =>
    RustLib.instance.api.crateApiBridgeUdpClientReceiveText(client: client);

/// Checks whether the given `UdpClient` is currently connected to a server.
///
/// # Arguments
///
/// * `client` - Reference to the `UdpClient`.
///
/// # Returns
///
/// * `bool` - `true` if the client is connected, `false` otherwise.
bool udpClientIsConnectedStatus({required UdpClient client}) => RustLib
    .instance
    .api
    .crateApiBridgeUdpClientIsConnectedStatus(client: client);

/// Creates a new instance of the `MdnsServer`.
///
/// This can be used to register and discover devices on the local network
/// via mDNS (Multicast DNS).
///
/// # Returns
///
/// * `MdnsServer` - A new, unstarted mDNS server instance.
MdnsServer createMdnsServerDaimon() =>
    RustLib.instance.api.crateApiBridgeCreateMdnsServerDaimon();

/// Starts the given mDNS server instance.
///
/// This begins advertising the service on the local network for discovery.
/// Should be called after creating the server.
///
/// # Arguments
///
/// * `server` - A mutable reference to an `MdnsServer`.
///
/// # Returns
///
/// * `Result<()>` - Returns `Ok(())` if the server starts successfully, otherwise an error.
void startMdnsDaimon({required MdnsServer server}) =>
    RustLib.instance.api.crateApiBridgeStartMdnsDaimon(server: server);

/// Stops the given mDNS server instance.
///
/// This halts any ongoing mDNS advertisement and removes the service
/// from the local network.
///
/// # Arguments
///
/// * `server` - A mutable reference to an `MdnsServer`.
void stopMdnsDaimon({required MdnsServer server}) =>
    RustLib.instance.api.crateApiBridgeStopMdnsDaimon(server: server);

/// Checks whether the given mDNS server instance is currently running.
///
/// # Arguments
///
/// * `server` - A reference to an `MdnsServer`.
///
/// # Returns
///
/// * `bool` - `true` if the server is running, `false` otherwise.
bool mdnsDaimonRunning({required MdnsServer server}) =>
    RustLib.instance.api.crateApiBridgeMdnsDaimonRunning(server: server);

/// Starts a UDP server on the given port.
///
/// # Arguments
/// * `port` - The port to bind the UDP socket to.
///
/// # Returns
/// Returns a `UdpServer` instance wrapped in `Result`. This server can be used to send and receive messages.
Future<UdpServer> startUdpServer({required int port}) =>
    RustLib.instance.api.crateApiBridgeStartUdpServer(port: port);

/// Sends a message to all clients currently connected to the UDP server.
///
/// # Arguments
/// * `server` - The `UdpServer` instance used to send the message.
/// * `msg` - A `String` containing the message to be sent.
///
/// # Returns
/// Returns `Ok(())` if the message was sent successfully.
Future<void> udpSendMessage({required UdpServer server, required String msg}) =>
    RustLib.instance.api.crateApiBridgeUdpSendMessage(server: server, msg: msg);

/// Streams incoming UDP packets to the Flutter side.
///
/// This function runs a background task that listens for UDP messages and
/// sends each one to the provided `StreamSink`.
///
/// # Arguments
/// * `server` - The `UdpServer` instance to listen on.
/// * `sink` - The stream sink that forwards packets to Flutter.
///
/// # Returns
/// Returns `Ok(())` if the stream is set up successfully.
Stream<UdpPacket> udpReceiveStream({required UdpServer server}) =>
    RustLib.instance.api.crateApiBridgeUdpReceiveStream(server: server);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< MdnsServer>>
abstract class MdnsServer implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SocketAddr>>
abstract class SocketAddr implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UdpPacket>>
abstract class UdpPacket implements RustOpaqueInterface {
  SocketAddr get addr;

  Uint8List get data;

  set addr(SocketAddr addr);

  set data(Uint8List data);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<UdpServer>>
abstract class UdpServer implements RustOpaqueInterface {}
